x <- 1
print(x)
x
msg <- "hello"
msg
y <--
6
y
y <-
6
y
x <- 1:20
x
x <- c(1+0i, 4+4i)
x
y <- (1.7, "a")
y <- c(1.7, "a")
y
m <- matrix(nrow =2, ncol = 3)
m
dim(m)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
x<-c(1:8)
x
sum(x>4)
x>4
read.table("foo.txt")
str(.platform)
str(.Platform)
str(file)
getwd
getwd()
getwd()
setwd("~/")
setwd("~/Coding Projects")
setwd("~/Coding Projects/R")
install.packages("slidify")
install.packages("KernSmooth"")
install.packages("KernSmooth"")
install.packages("KernSmooth"")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
getwd()
?matrix
x <- c(rnorm(6))
x
y <- as.matrix(x, 2, 3)
y
solve(y)
x <- c(rnorm(9))
x
x <- c(rnorm(10000))
y <- matrix(x, nrow = 100, ncol = 100)
y
solve(y)
x <- c(rnorm(1000000))
y <- matrix(x, nrow = 1000, ncol = 1000)
solve(y)
solve(y)
y
solve(y)
source('~/prog-assign-2/ProgrammingAssignment2/cachematrix.R')
?list
list(a, b, c, d)
a <-1
b <- 2
c <- 3
d <- 4
list(a, b, c, d)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(5)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(5)
cachemean(5,4)
source('~/prog-assign-2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(y)
source('~/prog-assign-2/ProgrammingAssignment2/cachematrix.R')
source('~/prog-assign-2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(y)
cacheSolve(y)
cacheSolve()
v <- makeVector()
v
v$set(20:40)
v$get()
cachemean(v)
cachemean(v)
v$set(30:50)
cachemean(v)
v$set(30:50)
cachemean(v)
cachemean(v)
a <- makeCacheMatrix()
a
a$set(y)
a$get()
a$get()
x <- matrix(c(rnorm(100)), ncol = 100, nrow = 100)
a$set(x)
a$get()
x <- matrix(c(rnorm(100)), ncol = 10, nrow = 10)
a$set(x)
a$get()
a$get()
cacheSolve(a)
cacheSolve(a)
b <- a$set()
a$get()
source('~/prog-assign-2/ProgrammingAssignment2/cachematrix.R')
a
a$get()
cacheSolve(a)
source('~/prog-assign-2/ProgrammingAssignment2/cachematrix.R')
?windows
?jpeg
?xfig
?postscript
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
size(trainIndicator)
length(trainIndicator)
dim(trainIndicator)
str(trainIndicator)
table(trainIndicator)
?setseed
?set.seed
dim(spam)
head(spam)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
summary(spam)
names(trainSpam)
head(trainSpam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:10] + 1)
)
plot(log10(trainSpam + 1))
plot(log10(trainSpam[,] + 1))
plot(log10(trainSpam[, 1:20] + 1))
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
?hclust
?t
t(trainSpam[, 1:57])
head(t(trainSpam[, 1:57]))
trainSpam[, 1:57]
t(trainSpam[, 1:57])
?dist
?hclustplot(hCluster)
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(traSpam[, 1:55] + 1))))
plot(hClusterUpdated)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
?hclust
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y> 0.5))
cvError <- rep(NA, 55)
library(boot)
for (i in 1:55) {}
for (i in 1:55) {
lmFormula <- reformulate(names(trainSpam)[i], response = "numType")
glmFit <- glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
about()
abourR()
aboutR()
R.Version()
R.version
install.packages("vegan")
?vegan
??vegan
?cv.glm
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.lmline
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?lattice
?par
?splom
?trellis.par.set
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
movies
?aes
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?transform
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = "class")
qplot(displ, hwy, data = mpg, color = class)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(year, data = mpg)
qplot(year, data = mpg, fill = drv)
qplot(model, data = mpg, fill = drv)
qplot(manufaturer, data = mpg, fill = drv)
qplot(manufacturer, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
setwd("/Users/Mateo/Dropbox/Continuing Education/2014/Coursera/Data Science Specialization (Johns Hopkins)/5. Reproducible Research/Working Data/RepData_PeerAssessment1")
getwd()
?unzip
unzip("activity.zip")
df <- read.csv("activity.csv")
str(df)
summary("df")
library(ggplot2)
install.packages("ggplot2")
setwd("/Users/Mateo/Dropbox/R Projects/My Scripts")
source("CommonPackages.R")
loadCommonPackages()
library(ggplot2)
library(lattice)
setwd("/Users/Mateo/Dropbox/Continuing Education/2014/Coursera/Data Science Specialization (Johns Hopkins)/5. Reproducible Research/Working Data/RepData_PeerAssessment1")
str(df)
qplot(date, data = df)
qplot(steps, data = df)
qplot(steps, date, data = df)
qplot(sum(steps), data = df)
sum(df$steps)
qplot(date, steps, data = df, geom="histogram")
?geom_bar
g <- ggplot(df, aes(steps, date))
g + geom_bar()
g + geom_point()
g <- ggplot(df, aes(date, steps))
g + geom_point()
g <- ggplot(df, aes(date, sum(steps))
)
g + geom_point()
g <- ggplot(df, aes(date, steps))
g + geom_point()
g + geom_bar()
g
g + geom_bar(stat="identity")
g <- ggplot(df, aes(date, mean(steps))
g <- ggplot(df, aes(date, mean(steps)))
g + geom_bar(stat="identity")
g <- ggplot(df, aes(date, steps))
g + geom_bar(stat="identity")
g + geom_bar(stat="identity") + opts(axis.text.x=theme_text(angle=45))
g + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(df)
g + geom_histogram(stat="identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
g + geom_histogram(stat="identity", binwidth = 1) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
g + geom_histogram(stat="identity", binwidth = 2) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
?transform
df
str(df)
df_sum_steps <- sum(df$steps, df$date)
df_sum_steps
df_sum_steps <- sum(df$steps, df$date, na.rm = TRUE)
df_sum_steps
df_sum_steps <- sum(df, date, na.rm = TRUE)
?aggregate
aggregate(df, date)
aggregate(df, date, sum)
aggregate(df, df$date, sum)
aggregate(df, c("date"), sum)
?setdiff
install.packages("ddply")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(plyr)
?ddply
summarise(df, var1 = date)
summarise(df, var1 = sum(steps))
sum_df <- ddply(df, "date", transform, sum_steps = sum(steps))
sum_df
str(sum)df
str(sum_df)
sum_df <- aggregate(df$steps, list(date = df$date), sum)
sum_df
sum_df <- aggregate(df$steps, list(date = df$date), sum(na.rm = TRUE))
sum_df <- aggregate(df$steps, list(date = df$date), sum, na.rm=TRUE
)
sum_df
sum_df <- with(df, aggregate(steps, list(date = date), sum, na.rm=TRUE))
sum_df
sum_df <- with(df, aggregate(steps = steps, list(date = date), sum, na.rm=TRUE))
sum_df <- with(df, aggregate(steps, list(date = date), sum, na.rm=TRUE))
sum_df <- with(df, aggregate(steps, list(date), sum, na.rm=TRUE))
sum_df
names(sum_df) <- c("date", "sum_steps")
sum_df
?with
str(sum_df)
sum_df[2]
names(sum_df[2]) <- "steps"
str(sum_df)
ave(sum_df$sum_steps)
median(sum_df$sum_steps)
?mean
mean(sum_df$sum_steps)
str(sum_df$date)
class(sum_df$date)
str(df)
avg_df <- with(df, aggregate(steps, list(interval), ave, na.rm = TRUE))
avg_df
avg_df <- with(df, aggregate(steps, list(interval), mean, na.rm = TRUE))
avg_df
names(avg_df) <- c("interval", "avg_steps")
ggplot(avgStepsByInterval, aes(interval, avg_steps)) + geom_line()
library(ggplot2)
ggplot(avgStepsByInterval, aes(interval, avg_steps)) + geom_line()
ggplot(avg_df, aes(interval, avg_steps)) + geom_line()
with(avg_df, qplot(interval, steps))
with(avg_df, qplot(interval, avg_steps))
with(avg_df, qplot(interval, avg_steps, geom = "line"))
avgStepsByInterval <- with(df,
aggregate(steps,list(interval), ave, na.rm = TRUE))
names(avgStepsByInterval) = c("interval", "steps")
with(avgStepsByInterval, qplot(interval, avg_steps, geom = "line"))
with(avgStepsByInterval, qplot(interval, steps, geom = "line"))
avg_df
qplot(data = avg_df, interval, avg_steps, geom="line")
avg_df$interval[max(avg_df$avg_steps)]
avg_df[max(avg_df$avg_steps)]
avg_df[max(avg_df$avg_steps),]
aggregate(df$steps, by = list(interval), mean, na.rm = TRUE)
aggregate(df$steps, by = list(df$interval), mean, na.rm = TRUE)
summary(avg_df)
max(avg_df$avg_steps)
avg_df$interval[max(avg_df$avg_steps)]
avg_df$interval[max(avg_df$avg_steps),]
avg_df$interval[,max(avg_df$avg_steps)]
avg_df$interval[which.max(avg_df$avg_steps)]
with(avg_df, interval[which.max(avg_steps)])
is.na(df)
str(df)
sum(is.na(df))
sum(is.na(df$steps))
df$steps
which(is.na(df$steps)
)
which(!is.na(df$steps))
df[which(is.na(df$steps))]
df[which(is.na(df$steps)),]
?match
avg_df
str(avg_df)
match(df$interval[which(is.na(df$steps))], avg_df$interval)
df$steps[which(is.na(df$steps))] <- avg_df(match(df$interval[which(is.na(df$steps))], avg_df$interval))
df$steps[which(is.na(df$steps))] <- avg_df$avg_steps[match(df$interval[which(is.na(df$steps))], avg_df$interval)]
sum(is.na(df))
df <- cbind(df, weekdays(df$date))
df$date <- as.Date(df$date)
str(df)
sum(is.na(df))
install.packages("lubridate")
library(lubridate)
?lubridate
?wday
weekdays(df$date)
which(weekdays(df$date) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
)
is.na(which(weekdays(df$date) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")))
sum(is.na(which(weekdays(df$date) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))))
?weekdays
weekdays()
weekdays
sum(!is.na(which(weekdays(df$date) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))))
weekdays(df$date)
which([)weekdays(df$date) == "Sunday")
which(weekdays(df$date) == "Sunday")
which(weekdays(df$date) == "Saturday")
which(weekdays(df$date) %in% c("Sunday","Saturday")
)
df$weekdays <- "Y"
str(df)
df$day[which(weekdays(df$date) %in% c("Sunday","Saturday"))] <- "weekend"
df$weekdays[which(weekdays(df$date) %in% c("Sunday","Saturday"))] <- "weekend"
df$weekdays[which(weekdays(df$date) %in% c("Monday","Tuesday", "Wednesday", "Thursday", "Friday"))] <- "weekday"
df$day <- NA
knit2html(input = "PA1_template.Rmd")
install.packages("knitr")
library(knitr)
knit2html(input = "PA1_template.Rmd")
knit2html(input = "PA1_template.Rmd")
getwd()
setwd('/Users/Mateo/Dropbox/Continuing Education/2014/Coursera/Data Science Specialization (Johns Hopkins)/5. Reproducible Research/Working Data/RepData_PeerAssessment1')
knit2html(input = "PA1_template.Rmd")
